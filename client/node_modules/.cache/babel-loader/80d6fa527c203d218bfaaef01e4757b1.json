{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport taskService from './taskService';\nconst initialState = {\n  tasks: [],\n  task: {},\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const createNewTask = createAsyncThunk('tasks/create', async (taskData, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await taskService.createNewTask(taskData, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const taskSlice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createNewTask.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNewTask.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(createNewTask.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/tasks/taskSlice.ts"],"names":["createSlice","createAsyncThunk","taskService","initialState","tasks","task","isError","isSuccess","isLoading","message","createNewTask","taskData","thunkApi","token","getState","auth","user","err","response","data","toString","rejectWithValue","taskSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","rejected","payload","actions","reducer"],"mappings":"AACA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAoBA,MAAMC,YAAsB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,EADuB;AAE9BC,EAAAA,IAAI,EAAE,EAFwB;AAG9BC,EAAAA,OAAO,EAAE,KAHqB;AAI9BC,EAAAA,SAAS,EAAE,KAJmB;AAK9BC,EAAAA,SAAS,EAAE,KALmB;AAM9BC,EAAAA,OAAO,EAAE;AANqB,CAA/B;AASA,OAAO,MAAMC,aAAa,GAAGT,gBAAgB,CAC5C,cAD4C,EAE5C,OAAOU,QAAP,EAAiCC,QAAjC,KAA8C;AAE7C,MAAI;AAEH;AACA,UAAMC,KAAK,GAAID,QAAQ,CAACE,QAAT,EAAD,CAAmCC,IAAnC,CAAwCC,IAAxC,CAA6CH,KAA3D;AAEA,WAAO,MAAMX,WAAW,CAACQ,aAAZ,CAA0BC,QAA1B,EAAoCE,KAApC,CAAb;AACA,GAND,CAME,OAAOI,GAAP,EAAY;AACb,UAAMR,OAAO,GACXQ,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBV,OAAxD,IACGQ,GAAG,CAACR,OADP,IAEAQ,GAAG,CAACG,QAAJ,EAHD;AAKA,WAAOR,QAAQ,CAACS,eAAT,CAAyBZ,OAAzB,CAAP;AACA;AACD,CAlB2C,CAAtC;AAqBP,OAAO,MAAMa,SAAS,GAAGtB,WAAW,CAAC;AACpCuB,EAAAA,IAAI,EAAE,MAD8B;AAEpCpB,EAAAA,YAFoC;AAGpCqB,EAAAA,QAAQ,EAAE;AACTC,IAAAA,KAAK,EAAGC,KAAD,IAAWvB;AADT,GAH0B;AAMpCwB,EAAAA,aAAa,EAAGC,OAAO,IAAI;AAC1BA,IAAAA,OAAO,CACLC,OADF,CACUnB,aAAa,CAACoB,OADxB,EACkCJ,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAAClB,SAAN,GAAkB,IAAlB;AACA,KAHF,EAIEqB,OAJF,CAIUnB,aAAa,CAACqB,SAJxB,EAImC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACpDN,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACnB,SAAN,GAAkB,IAAlB;AACA,KAPF,EAQEsB,OARF,CAQUnB,aAAa,CAACuB,QARxB,EAQkC,CAACP,KAAD,EAAQM,MAAR,KAAmB;AACnDN,MAAAA,KAAK,CAAClB,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAACpB,OAAN,GAAgB,IAAhB;AACAoB,MAAAA,KAAK,CAACjB,OAAN,GAAgBuB,MAAM,CAACE,OAAvB;AACA,KAZF;AAaA;AApBmC,CAAD,CAA7B;AAuBP,OAAO,MAAM;AAACT,EAAAA;AAAD,IAAUH,SAAS,CAACa,OAA1B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport taskService from './taskService';\nimport {RootState} from \"../../app/store\";\nimport {stat} from \"fs\";\n\n\n// TODO ResponseTaskType\nexport interface TaskType {\n\ttasks: Record<any, any>[]\n\ttask: Record<any, any> | null;\n\tisError: boolean;\n\tisSuccess: boolean;\n\tisLoading: boolean;\n\tmessage: string;\n}\n\nexport interface SingleTaskType {\n\ttitle: string;\n\tdescription: string;\n}\n\nconst initialState: TaskType = {\n\ttasks: [],\n\ttask: {},\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n}\n\nexport const createNewTask = createAsyncThunk(\n\t'tasks/create',\n\tasync (taskData: SingleTaskType, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await taskService.createNewTask(taskData, token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\nexport const taskSlice = createSlice({\n\tname: 'task',\n\tinitialState,\n\treducers: {\n\t\treset: (state) => initialState\n\t},\n\textraReducers: (builder => {\n\t\tbuilder\n\t\t\t.addCase(createNewTask.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(createNewTask.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t})\n\t\t\t.addCase(createNewTask.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload as string;\n\t\t\t})\n\t})\n});\n\nexport const {reset} = taskSlice.actions;\nexport default taskSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}