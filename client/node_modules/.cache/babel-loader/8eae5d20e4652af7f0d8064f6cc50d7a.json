{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport noteService from \"./noteService\";\nconst initialState = {\n  notes: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // get task notes\n\nexport const showNotes = createAsyncThunk('notes/getAll', async (taskId, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await noteService.showNotes(taskId, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builider => {}\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/notes/noteSlice.ts"],"names":["createSlice","createAsyncThunk","noteService","initialState","notes","isError","isSuccess","isLoading","message","showNotes","taskId","thunkApi","token","getState","auth","user","err","response","data","toString","rejectWithValue","noteSlice","name","reducers","reset","state","extraReducers","builider","actions","reducer"],"mappings":"AACA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,SAAS,EAAE,KAHS;AAIpBC,EAAAA,SAAS,EAAE,KAJS;AAKpBC,EAAAA,OAAO,EAAE;AALW,CAArB,C,CAQA;;AACA,OAAO,MAAMC,SAAS,GAAGR,gBAAgB,CACxC,cADwC,EAExC,OAAOS,MAAP,EAAuBC,QAAvB,KAAoC;AAEnC,MAAI;AAEH;AACA,UAAMC,KAAK,GAAID,QAAQ,CAACE,QAAT,EAAD,CAAmCC,IAAnC,CAAwCC,IAAxC,CAA6CH,KAA3D;AAEA,WAAO,MAAMV,WAAW,CAACO,SAAZ,CAAsBC,MAAtB,EAA8BE,KAA9B,CAAb;AACA,GAND,CAME,OAAOI,GAAP,EAAY;AACb,UAAMR,OAAO,GACXQ,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBV,OAAxD,IACGQ,GAAG,CAACR,OADP,IAEAQ,GAAG,CAACG,QAAJ,EAHD;AAKA,WAAOR,QAAQ,CAACS,eAAT,CAAyBZ,OAAzB,CAAP;AACA;AACD,CAlBuC,CAAlC;AAqBP,OAAO,MAAMa,SAAS,GAAGrB,WAAW,CAAC;AACpCsB,EAAAA,IAAI,EAAE,MAD8B;AAEpCnB,EAAAA,YAFoC;AAGpCoB,EAAAA,QAAQ,EAAE;AACTC,IAAAA,KAAK,EAAGC,KAAD,IAAWtB;AADT,GAH0B;AAMpCuB,EAAAA,aAAa,EAAGC,QAAD,IAAc,CAE5B;AARmC,CAAD,CAA7B;AAYP,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAUH,SAAS,CAACO,OAA1B;AACP,eAAeP,SAAS,CAACQ,OAAzB","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../../app/store\";\nimport noteService from \"./noteService\";\n\nconst initialState = {\n\tnotes: [],\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n}\n\n// get task notes\nexport const showNotes = createAsyncThunk(\n\t'notes/getAll',\n\tasync (taskId: string, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await noteService.showNotes(taskId, token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\nexport const noteSlice = createSlice({\n\tname: 'note',\n\tinitialState,\n\treducers: {\n\t\treset: (state) => initialState\n\t},\n\textraReducers: (builider) => {\n\n\t}\n})\n\n\nexport const {reset} = noteSlice.actions;\nexport default noteSlice.reducer\n"]},"metadata":{},"sourceType":"module"}