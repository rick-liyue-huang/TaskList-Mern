{"ast":null,"code":"import axios from \"axios\";\nconst API_URI = '/api/tasks/';\n/**\n * @desc create new task after login or register\n * @param task\n * @param token\n */\n\nconst createNewTask = async (task, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.post(API_URI, task, config);\n  return response.data;\n};\n/**\n * @desc show all tasks by token\n * @param token\n */\n\n\nconst showAllTasks = async token => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URI, config);\n  return response.data;\n};\n/**\n * @desc show the single task by id and token\n * @param id\n * @param token\n */\n\n\nconst showSingleTask = async (id, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URI + id, config);\n  return response.data;\n};\n/**\n * @desc close task by id and token\n * @param id\n * @param token\n */\n\n\nconst completeSingleTask = async (id, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.put(API_URI + id, {\n    status: 'completed'\n  }, config);\n  return response.data;\n};\n\nconst taskService = {\n  createNewTask,\n  showAllTasks,\n  showSingleTask,\n  completeSingleTask\n};\nexport default taskService;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/tasks/taskService.ts"],"names":["axios","API_URI","createNewTask","task","token","config","headers","Authorization","response","post","data","showAllTasks","get","showSingleTask","id","completeSingleTask","put","status","taskService"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,OAAO,GAAG,aAAhB;AAGA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,OAAOC,IAAP,EAA6BC,KAA7B,KAA+C;AACpE,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASH,KAAM;AADvB;AADK,GAAf;AAMA,QAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAWR,OAAX,EAAoBE,IAApB,EAA0BE,MAA1B,CAAvB;AAEA,SAAOG,QAAQ,CAACE,IAAhB;AACA,CAVD;AAYA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG,MAAOP,KAAP,IAAyB;AAC7C,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASH,KAAM;AADvB;AADK,GAAf;AAMA,QAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAN,CAAUX,OAAV,EAAmBI,MAAnB,CAAvB;AAEA,SAAOG,QAAQ,CAACE,IAAhB;AACA,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,cAAc,GAAG,OAAOC,EAAP,EAAmBV,KAAnB,KAAqC;AAC3D,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASH,KAAM;AADvB;AADK,GAAf;AAMA,QAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACY,GAAN,CAAUX,OAAO,GAAGa,EAApB,EAAwBT,MAAxB,CAAvB;AAEA,SAAOG,QAAQ,CAACE,IAAhB;AACA,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,kBAAkB,GAAG,OAAOD,EAAP,EAAmBV,KAAnB,KAAqC;AAC/D,QAAMC,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASH,KAAM;AADvB;AADK,GAAf;AAMA,QAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACgB,GAAN,CAAUf,OAAO,GAAGa,EAApB,EAAwB;AAACG,IAAAA,MAAM,EAAE;AAAT,GAAxB,EAA+CZ,MAA/C,CAAvB;AAEA,SAAOG,QAAQ,CAACE,IAAhB;AACA,CAVD;;AAYA,MAAMQ,WAAW,GAAG;AACnBhB,EAAAA,aADmB;AAEnBS,EAAAA,YAFmB;AAGnBE,EAAAA,cAHmB;AAInBE,EAAAA;AAJmB,CAApB;AAQA,eAAeG,WAAf","sourcesContent":["\nimport axios from \"axios\";\nimport {SingleTaskType} from \"./taskSlice\";\n\nconst API_URI = '/api/tasks/';\n\n\n/**\n * @desc create new task after login or register\n * @param task\n * @param token\n */\nconst createNewTask = async (task: SingleTaskType, token: string) => {\n\tconst config = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t};\n\n\tconst response = await axios.post(API_URI, task, config);\n\n\treturn response.data;\n}\n\n/**\n * @desc show all tasks by token\n * @param token\n */\nconst showAllTasks = async (token: string) => {\n\tconst config = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t};\n\n\tconst response = await axios.get(API_URI, config);\n\n\treturn response.data;\n};\n\n/**\n * @desc show the single task by id and token\n * @param id\n * @param token\n */\nconst showSingleTask = async (id: string, token: string) => {\n\tconst config = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t};\n\n\tconst response = await axios.get(API_URI + id, config);\n\n\treturn response.data;\n}\n\n/**\n * @desc close task by id and token\n * @param id\n * @param token\n */\nconst completeSingleTask = async (id: string, token: string) => {\n\tconst config = {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${token}`\n\t\t}\n\t};\n\n\tconst response = await axios.put(API_URI + id, {status: 'completed'}, config);\n\n\treturn response.data;\n}\n\nconst taskService = {\n\tcreateNewTask,\n\tshowAllTasks,\n\tshowSingleTask,\n\tcompleteSingleTask\n}\n\n\nexport default taskService;\n"]},"metadata":{},"sourceType":"module"}