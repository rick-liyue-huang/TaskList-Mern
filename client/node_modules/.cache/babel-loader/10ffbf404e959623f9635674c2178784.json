{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport taskService from './taskService';\nconst initialState = {\n  tasks: [],\n  task: {},\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n/**\n * @desc connect with task page by execute service function\n */\n\nexport const createNewTask = createAsyncThunk('tasks/create', async (taskData, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await taskService.createNewTask(taskData, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const showAllTasks = createAsyncThunk('tasks/getAll', async (_, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await taskService.showAllTasks(token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const showSingleTask = createAsyncThunk('tasks/get', async (taskId, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await taskService.showSingleTask(taskId, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const completeSingleTask = createAsyncThunk('tasks/complete', async (taskId, thunkApi) => {\n  try {\n    // @ts-ignore\n    const token = thunkApi.getState().auth.user.token;\n    return await taskService.completeSingleTask(taskId, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\nexport const taskSlice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createNewTask.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNewTask.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.task = action.payload;\n    }).addCase(createNewTask.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(showAllTasks.pending, state => {\n      state.isLoading = true;\n    }).addCase(showAllTasks.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.tasks = action.payload;\n    }).addCase(showAllTasks.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(showSingleTask.pending, state => {\n      state.isLoading = true;\n    }).addCase(showSingleTask.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true; // TODO:\n\n      state.task = action.payload;\n    }).addCase(showSingleTask.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(completeSingleTask.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.tasks.map(task => task._id === action.payload.id ? task.status = 'completed' : task);\n    });\n  }\n});\nexport const {\n  reset\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/tasks/taskSlice.ts"],"names":["createSlice","createAsyncThunk","taskService","initialState","tasks","task","isError","isSuccess","isLoading","message","createNewTask","taskData","thunkApi","token","getState","auth","user","err","response","data","toString","rejectWithValue","showAllTasks","_","showSingleTask","taskId","completeSingleTask","taskSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","map","_id","id","status","actions","reducer"],"mappings":"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","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport taskService from './taskService';\nimport {RootState} from \"../../app/store\";\n\n\nexport interface ResponseTaskType {\n\t_id?: string;\n\tcreatedAt?: string\n\ttitle: string;\n\tdescription: string\n\tuser: string,\n\tstatus: string;\n}\n\n\nexport interface TaskType {\n\ttasks: ResponseTaskType[]\n\ttask: ResponseTaskType | Record<string, any>;\n\tisError: boolean;\n\tisSuccess: boolean;\n\tisLoading: boolean;\n\tmessage: string;\n}\n\nexport interface SingleTaskType {\n\ttitle: string;\n\tdescription: string;\n}\n\nconst initialState: TaskType = {\n\ttasks: [],\n\ttask: {},\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n}\n\n/**\n * @desc connect with task page by execute service function\n */\nexport const createNewTask = createAsyncThunk(\n\t'tasks/create',\n\tasync (taskData: SingleTaskType, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await taskService.createNewTask(taskData, token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\nexport const showAllTasks = createAsyncThunk(\n\t'tasks/getAll',\n\tasync (_, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await taskService.showAllTasks(token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\nexport const showSingleTask = createAsyncThunk(\n\t'tasks/get',\n\tasync (taskId: string, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await taskService.showSingleTask(taskId, token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\n\n\nexport const completeSingleTask = createAsyncThunk(\n\t'tasks/complete',\n\tasync (taskId: string, thunkApi) => {\n\n\t\ttry {\n\n\t\t\t// @ts-ignore\n\t\t\tconst token = (thunkApi.getState() as RootState).auth.user.token;\n\n\t\t\treturn await taskService.completeSingleTask(taskId, token)\n\t\t} catch (err) {\n\t\t\tconst message =\n\t\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t\t|| err.message ||\n\t\t\t\terr.toString() as string;\n\n\t\t\treturn thunkApi.rejectWithValue(message);\n\t\t}\n\t}\n)\n\n\nexport const taskSlice = createSlice({\n\tname: 'task',\n\tinitialState,\n\treducers: {\n\t\treset: (state) => initialState\n\t},\n\textraReducers: (builder => {\n\t\tbuilder\n\t\t\t.addCase(createNewTask.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(createNewTask.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t\tstate.task = action.payload;\n\t\t\t})\n\t\t\t.addCase(createNewTask.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload as string;\n\t\t\t})\n\t\t\t.addCase(showAllTasks.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(showAllTasks.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t\tstate.tasks = action.payload\n\t\t\t})\n\t\t\t.addCase(showAllTasks.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload as string;\n\t\t\t})\n\t\t\t.addCase(showSingleTask.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(showSingleTask.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t\t// TODO:\n\t\t\t\tstate.task = action.payload\n\t\t\t})\n\t\t\t.addCase(showSingleTask.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload as string;\n\t\t\t})\n\t\t\t.addCase(completeSingleTask.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.tasks.map(task => task._id === action.payload.id ? (task.status = 'completed') : task);\n\t\t\t})\n\t})\n});\n\nexport const {reset} = taskSlice.actions;\nexport default taskSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}