{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n/**\n * @desc register user\n */\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkApi) => {\n  console.log('register---user: ', user);\n\n  try {\n    return await authService.register(user);\n  } catch (err) {}\n});\n/**\n * @desc login user\n */\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkApi) => {\n  console.log(user);\n});\n/**\n * @desc deal with auth redux stuff\n */\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {}\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","initialState","user","isError","isSuccess","isLoading","message","register","thunkApi","console","log","authService","err","login","authSlice","name","reducers","extraReducers","builder","reducer"],"mappings":"AACA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AAwBA,MAAMC,YAAuB,GAAE;AAC9BC,EAAAA,IAAI,EAAE,IADwB;AAE9BC,EAAAA,OAAO,EAAE,KAFqB;AAG9BC,EAAAA,SAAS,EAAE,KAHmB;AAI9BC,EAAAA,SAAS,EAAE,KAJmB;AAK9BC,EAAAA,OAAO,EAAE;AALqB,CAA/B;AAQA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGP,gBAAgB,CACvC,eADuC,EAEvC,OAAOE,IAAP,EAAuBM,QAAvB,KAAoC;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCR,IAAjC;;AAEA,MAAI;AACH,WAAO,MAAMS,WAAW,CAACJ,QAAZ,CAAqBL,IAArB,CAAb;AACA,GAFD,CAEE,OAAOU,GAAP,EAAY,CAEb;AAED,CAXuC,CAAjC;AAaP;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAGb,gBAAgB,CACpC,YADoC,EAEpC,OAAOE,IAAP,EAAuBM,QAAvB,KAAoC;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,CAJoC,CAA9B;AAOP;AACA;AACA;;AACA,OAAO,MAAMY,SAAS,GAAGf,WAAW,CAAC;AACpCgB,EAAAA,IAAI,EAAE,MAD8B;AAEpCd,EAAAA,YAFoC;AAGpCe,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa,CAAE;AAJM,CAAD,CAA7B;AAOP,eAAeJ,SAAS,CAACK,OAAzB","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\n\nexport interface UserType {\n\tname?: string;\n\temail: string;\n\tpassword: string;\n\tcpassword?: string;\n}\n\nexport interface ResponseUserType {\n\t_id: string,\n\tname: string,\n\temail: string,\n\ttoken: string\n}\n\nexport interface AuthType {\n\tuser: ResponseUserType | null;\n\tisError: boolean;\n\tisSuccess: boolean;\n\tisLoading: boolean;\n\tmessage: string;\n}\n\nconst initialState:  AuthType= {\n\tuser: null,\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n};\n\n/**\n * @desc register user\n */\nexport const register = createAsyncThunk(\n\t'auth/register',\n\tasync (user: UserType, thunkApi) => {\n\tconsole.log('register---user: ', user);\n\n\ttry {\n\t\treturn await authService.register(user)\n\t} catch (err) {\n\n\t}\n\n});\n\n/**\n * @desc login user\n */\nexport const login = createAsyncThunk(\n\t'auth/login',\n\tasync (user: UserType, thunkApi) => {\n\tconsole.log(user);\n});\n\n\n/**\n * @desc deal with auth redux stuff\n */\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {}\n});\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}