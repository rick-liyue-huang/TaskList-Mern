{"ast":null,"code":"var _jsxFileName = \"/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/pages/TaskShow.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { showSingleTask } from \"../features/tasks/taskSlice\";\nimport HomeButton from \"../components/HomeButton\";\nimport SpinnerComponent from \"../components/Spinner\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskShowPage = () => {\n  _s();\n\n  const {\n    task,\n    isError,\n    isLoading,\n    message\n  } = useSelector(state => state.task);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    taskId\n  } = useParams();\n  useEffect(() => {\n    if (isError) {\n      toast.error(message);\n    }\n\n    dispatch(showSingleTask(taskId));\n  }, [isError, message, taskId]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(SpinnerComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No Task Show Here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'ticket-page',\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"ticket-header\",\n      children: [/*#__PURE__*/_jsxDEV(HomeButton, {\n        url: '/tasks'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Task ID: \", task && task._id, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status status-${task.status}`,\n          children: task.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Submission Date: \", new Date(task.createdAt).toLocaleDateString('en-AU')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ticket-desc\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TaskShowPage, \"mJjD7hm/q0GAquA2JWEjw3+4bP8=\", false, function () {\n  return [useSelector, useDispatch, useNavigate, useParams];\n});\n\n_c = TaskShowPage;\nexport default TaskShowPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskShowPage\");","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/pages/TaskShow.tsx"],"names":["React","useEffect","useSelector","useDispatch","useNavigate","useParams","showSingleTask","HomeButton","SpinnerComponent","toast","TaskShowPage","task","isError","isLoading","message","state","dispatch","navigate","taskId","error","_id","status","Date","createdAt","toLocaleDateString","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,WAAR,EAAqBC,SAArB,QAAqC,kBAArC;AACA,SAAQC,cAAR,QAAoC,6BAApC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA,SAAQC,KAAR,QAAoB,gBAApB;;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAE1B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAAsCZ,WAAW,CAAEa,KAAD,IAAsBA,KAAK,CAACJ,IAA7B,CAAvD;AACA,QAAMK,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,QAAQ,GAAEb,WAAW,EAA3B;AAEA,QAAM;AAACc,IAAAA;AAAD,MAAWb,SAAS,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIW,OAAJ,EAAa;AACZH,MAAAA,KAAK,CAACU,KAAN,CAAYL,OAAZ;AACA;;AAEDE,IAAAA,QAAQ,CAACV,cAAc,CAACY,MAAD,CAAf,CAAR;AACA,GANQ,EAMN,CAACN,OAAD,EAAUE,OAAV,EAAmBI,MAAnB,CANM,CAAT;;AAQA,MAAIL,SAAJ,EAAe;AACd,wBAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,MAAID,OAAJ,EAAa;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACC;AAAK,IAAA,SAAS,EAAE,aAAhB;AAAA,2BACC;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA,8BACC,QAAC,UAAD;AAAY,QAAA,GAAG,EAAE;AAAjB;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,gCACWD,IAAI,IAAIA,IAAI,CAACS,GADxB,eAEC;AAAM,UAAA,SAAS,EAAG,iBAAgBT,IAAI,CAACU,MAAO,EAA9C;AAAA,oBACEV,IAAI,CAACU;AADP;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAQC;AAAA,wCAAsB,IAAIC,IAAJ,CAASX,IAAI,CAACY,SAAd,EAAmCC,kBAAnC,CAAsD,OAAtD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cARD,eASC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA,oBAAIb,IAAI,CAACc;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cATD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAkBA,CA1CD;;GAAMf,Y;UAEuCR,W,EAC3BC,W,EACDC,W,EAECC,S;;;KANZK,Y;AA4CN,eAAeA,YAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {showSingleTask, reset} from \"../features/tasks/taskSlice\";\nimport HomeButton from \"../components/HomeButton\";\nimport SpinnerComponent from \"../components/Spinner\";\nimport {RootState} from \"../app/store\";\nimport {toast} from \"react-toastify\";\n\n\nconst TaskShowPage = () => {\n\n\tconst {task, isError, isLoading, message} = useSelector((state: RootState) => state.task);\n\tconst dispatch = useDispatch();\n\tconst navigate= useNavigate();\n\n\tconst {taskId} = useParams();\n\n\tuseEffect(() => {\n\t\tif (isError) {\n\t\t\ttoast.error(message)\n\t\t}\n\n\t\tdispatch(showSingleTask(taskId!))\n\t}, [isError, message, taskId])\n\n\tif (isLoading) {\n\t\treturn <SpinnerComponent />\n\t}\n\n\tif (isError) {\n\t\treturn <h3>No Task Show Here...</h3>\n\t}\n\n\treturn (\n\t\t<div className={'ticket-page'}>\n\t\t\t<header className=\"ticket-header\">\n\t\t\t\t<HomeButton url={'/tasks'} />\n\t\t\t\t<h2>\n\t\t\t\t\tTask ID: {task && task._id}\n\t\t\t\t\t<span className={`status status-${task.status}`}>\n\t\t\t\t\t\t{task.status}\n\t\t\t\t\t</span>\n\t\t\t\t</h2>\n\t\t\t\t<h3>Submission Date: {new Date(task.createdAt as string).toLocaleDateString('en-AU')}</h3>\n\t\t\t\t<div className=\"ticket-desc\">\n\t\t\t\t\t<h3>Description</h3>\n\t\t\t\t\t<p>{task.description}</p>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);\n};\n\nexport default TaskShowPage;\n"]},"metadata":{},"sourceType":"module"}