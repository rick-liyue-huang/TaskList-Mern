{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { authService } from \"./authService\";\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n/**\n * @desc register user\n */\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkApi) => {\n  // console.log(user);\n  try {\n    // @ts-ignore\n    return await authService.register(user);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\n/**\n * @desc login user\n */\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkApi) => {\n  console.log(user);\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true; // @ts-ignore\n\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkApi","err","response","data","toString","rejectWithValue","login","console","log","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport {authService} from \"./authService\";\n\nexport interface UserType {\n\tname?: string;\n\temail: string;\n\tpassword: string;\n\tcpassword?: string\n}\n\ninterface StateType {\n\tuser: UserType | null;\n\tisError: boolean;\n\tisSuccess: boolean;\n\tisLoading: boolean;\n\tmessage: string;\n}\n\nconst user = JSON.parse(localStorage.getItem('user'))\n\nconst initialState: StateType = {\n\tuser: user ? user : null,\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n};\n\n/**\n * @desc register user\n */\nexport const register = createAsyncThunk('auth/register', async (user, thunkApi) => {\n\t// console.log(user);\n\n\ttry {\n\t\t// @ts-ignore\n\t\treturn await authService.register(user)\n\t} catch (err) {\n\t\tconst message = (err.response && err.response.data && err.response.data.message) || err.message || err.toString();\n\n\t\treturn thunkApi.rejectWithValue(message)\n\t}\n\n})\n\n/**\n * @desc login user\n */\nexport const login = createAsyncThunk('auth/login', async (user: Record<string, any>, thunkApi) => {\n\tconsole.log(user);\n});\n\n\n\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {\n\t\treset: (state: StateType) => {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.isError = false;\n\t\t\tstate.isSuccess = false;\n\t\t\tstate.message = ''\n\t\t}\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(register.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(register.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t\t// @ts-ignore\n\t\t\t\tstate.user = action.payload;\n\t\t\t})\n\t\t\t.addCase(register.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.message = action.payload as string;\n\t\t\t\tstate.user = null;\n\t\t\t})\n\t}\n});\n\nexport const {reset} = authSlice.actions;\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}