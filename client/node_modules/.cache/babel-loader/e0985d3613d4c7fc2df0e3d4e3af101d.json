{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from './authService';\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n/**\n * @desc register user\n */\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkApi) => {\n  console.log('register---user: ', user);\n\n  try {\n    return await authService.register(user);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkApi.rejectWithValue(message);\n  }\n});\n/**\n * @desc login user\n */\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkApi) => {\n  console.log(user);\n});\n/**\n * @desc deal with auth redux stuff\n */\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.user = null;\n      state.message = action.payload;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/rickhuang/WebstormProjects/TaskList-Mern/client/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","authService","initialState","user","isError","isSuccess","isLoading","message","register","thunkApi","console","log","err","response","data","toString","rejectWithValue","login","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"mappings":"AACA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AA2BA,MAAMC,YAAuB,GAAE;AAC9BC,EAAAA,IAAI,EAAE,IADwB;AAE9BC,EAAAA,OAAO,EAAE,KAFqB;AAG9BC,EAAAA,SAAS,EAAE,KAHmB;AAI9BC,EAAAA,SAAS,EAAE,KAJmB;AAK9BC,EAAAA,OAAO,EAAE;AALqB,CAA/B;AAQA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CACvC,eADuC,EAEvC,OAAOG,IAAP,EAAuBM,QAAvB,KAAoC;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCR,IAAjC;;AAEA,MAAI;AACH,WAAO,MAAMF,WAAW,CAACO,QAAZ,CAAqBL,IAArB,CAAb;AACA,GAFD,CAEE,OAAOS,GAAP,EAAY;AACb,UAAML,OAAO,GACXK,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBP,OAAxD,IACGK,GAAG,CAACL,OADP,IAEAK,GAAG,CAACG,QAAJ,EAHD;AAKA,WAAON,QAAQ,CAACO,eAAT,CAAyBT,OAAzB,CAAP;AACA;AAED,CAhBuC,CAAjC;AAkBP;AACA;AACA;;AACA,OAAO,MAAMU,KAAK,GAAGjB,gBAAgB,CACpC,YADoC,EAEpC,OAAOG,IAAP,EAAuBM,QAAvB,KAAoC;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,CAJoC,CAA9B;AAOP;AACA;AACA;;AACA,OAAO,MAAMe,SAAS,GAAGnB,WAAW,CAAC;AACpCoB,EAAAA,IAAI,EAAE,MAD8B;AAEpCjB,EAAAA,YAFoC;AAGpCkB,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC3BA,IAAAA,OAAO,CACLC,OADF,CACUf,QAAQ,CAACgB,OADnB,EAC6BC,KAAD,IAAW;AACrCA,MAAAA,KAAK,CAACnB,SAAN,GAAkB,IAAlB;AACA,KAHF,EAIEiB,OAJF,CAIUf,QAAQ,CAACkB,SAJnB,EAI8B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC/CF,MAAAA,KAAK,CAACnB,SAAN,GAAkB,KAAlB;AACAmB,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACAoB,MAAAA,KAAK,CAACtB,IAAN,GAAawB,MAAM,CAACC,OAApB;AACA,KARF,EASEL,OATF,CASUf,QAAQ,CAACqB,QATnB,EAS6B,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC9CF,MAAAA,KAAK,CAACnB,SAAN,GAAkB,KAAlB;AACAmB,MAAAA,KAAK,CAACrB,OAAN,GAAgB,IAAhB;AACAqB,MAAAA,KAAK,CAACtB,IAAN,GAAa,IAAb;AACAsB,MAAAA,KAAK,CAAClB,OAAN,GAAgBoB,MAAM,CAACC,OAAvB;AACA,KAdF;AAeA;AApBmC,CAAD,CAA7B;AAuBP,eAAeV,SAAS,CAACY,OAAzB","sourcesContent":["\nimport {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport authService from './authService';\nimport {response} from \"express\";\nimport {stat} from \"fs\";\n\n\nexport interface UserType {\n\tname?: string;\n\temail: string;\n\tpassword: string;\n\tcpassword?: string;\n}\n\nexport interface ResponseUserType {\n\t_id: string,\n\tname: string,\n\temail: string,\n\ttoken: string\n}\n\nexport interface AuthType {\n\tuser: ResponseUserType | null;\n\tisError: boolean;\n\tisSuccess: boolean;\n\tisLoading: boolean;\n\tmessage: string;\n}\n\nconst initialState:  AuthType= {\n\tuser: null,\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: ''\n};\n\n/**\n * @desc register user\n */\nexport const register = createAsyncThunk(\n\t'auth/register',\n\tasync (user: UserType, thunkApi) => {\n\tconsole.log('register---user: ', user);\n\n\ttry {\n\t\treturn await authService.register(user)\n\t} catch (err) {\n\t\tconst message =\n\t\t\t(err.response && err.response.data && err.response.data.message)\n\t\t\t|| err.message ||\n\t\t\terr.toString() as string;\n\n\t\treturn thunkApi.rejectWithValue(message);\n\t}\n\n});\n\n/**\n * @desc login user\n */\nexport const login = createAsyncThunk(\n\t'auth/login',\n\tasync (user: UserType, thunkApi) => {\n\tconsole.log(user);\n});\n\n\n/**\n * @desc deal with auth redux stuff\n */\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(register.pending, (state) => {\n\t\t\t\tstate.isLoading = true;\n\t\t\t})\n\t\t\t.addCase(register.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isSuccess = true;\n\t\t\t\tstate.user = action.payload;\n\t\t\t})\n\t\t\t.addCase(register.rejected, (state, action) => {\n\t\t\t\tstate.isLoading = false;\n\t\t\t\tstate.isError = true;\n\t\t\t\tstate.user = null;\n\t\t\t\tstate.message = action.payload;\n\t\t\t})\n\t}\n});\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}